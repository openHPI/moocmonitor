Globe
<hr>
<script type='text/javascript' src="/js/topojson.js"></script>
<script type='text/javascript' src="/js/planetaryjs.min.js"></script>

<div class="container">
  <div class="row">
    <div class="col-md-12 white-bg p20">
      <div class="row">
        <center><canvas height="1000" id="mapCanvas" width="1000"></canvas></center>
      </div>
    </div>
  </div>
</div>
<script type="text/javascript">
  var canvas = document.getElementById('mapCanvas');
  var globe = planetaryjs.planet();
  // Load our custom `autorotate` plugin; see below.
  globe.loadPlugin(autorotate(10));
  // The `earth` plugin draws the oceans and the land; it's actually
  // a combination of several separate built-in plugins.
  //
  globe.loadPlugin(planetaryjs.plugins.earth({
    topojson: {file: '/js/world-110m.json'},
    oceans: {fill: '#7FDEEA'},
    land: {fill: '#C9FFCB'},
    borders: {stroke: '#A3FAA6'}
  }));

  // The `pings` plugin draws animated pings on the globe.
  globe.loadPlugin(planetaryjs.plugins.pings());
  // The `zoom` and `drag` plugins enable
  // manipulating the globe with the mouse.
  globe.loadPlugin(planetaryjs.plugins.zoom({
    scaleExtent: [50, 4000]
  }));
  globe.loadPlugin(planetaryjs.plugins.drag({
    // Dragging the globe should pause the
    // automatic rotation until we release the mouse.
    onDragStart: function () {
      this.plugins.autorotate.pause();
    },
    onDragEnd: function () {
      this.plugins.autorotate.resume();
    }
  }));
  // Set up the globe's initial scale, offset, and rotation.
  globe.projection.scale(500).translate([500, 500]).rotate([0, -10, 0]);
  setInterval(function () {
    globe_get_data()
  }, 60000);
  //initial load
  globe_get_data();
  // Special code to handle high-density displays (e.g. retina, some phones)
  // In the future, Planetary.js will handle this by itself (or via a plugin).
  if (window.devicePixelRatio == 2) {
    canvas.width = 2000;
    canvas.height = 2000;
    context = canvas.getContext('2d');
    context.scale(2, 2);
  }
  // Draw that globe!
  globe.draw(canvas);
  function globe_get_data() {

    $.ajax({
      url: "/api/v2/stats/geo.json",
    }).done(function (result) {
      $.each(result, function (index, value) {
        var lat = value['lat'];
        var lng = value['lon'];
        var color = '#7B241C';
        var angle = Math.min(value['count'], 5) / 20;
        console.log(angle);
        globe.plugins.pings.add(lng, lat, {color: color, ttl: 240000, angle: angle});
      });
    });

  };
  globe_get_data();
  // This plugin will automatically rotate the globe around its vertical
  // axis a configured number of degrees every second.
  function autorotate(degPerSec) {
    // Planetary.js plugins are functions that take a `planet` instance
    // as an argument...
    return function (planet) {
      var lastTick = null;
      var paused = false;
      planet.plugins.autorotate = {
        pause: function () {
          paused = true;
        },
        resume: function () {
          paused = false;
        }
      };
      // ...and configure hooks into certain pieces of its lifecycle.
      planet.onDraw(function () {
        if (paused || !lastTick) {
          lastTick = new Date();
        } else {
          var now = new Date();
          var delta = now - lastTick;
          // This plugin uses the built-in projection (provided by D3)
          // to rotate the globe each time we draw it.
          var rotation = planet.projection.rotate();
          rotation[0] += degPerSec * delta / 1000;
          if (rotation[0] >= 180) rotation[0] -= 360;
          planet.projection.rotate(rotation);
          lastTick = now;
        }
      });
    };
  }  ;
</script>
